#the code of ResNet model for DC228455,there exist another one model
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import matplotlib.pyplot as plt
from torch.utils.data import DataLoader
from tqdm import tqdm
import torchvision.models as models
import numpy as np
from sklearn.metrics import accuracy_score, roc_curve, auc, recall_score, f1_score, precision_score, confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve, average_precision_score  # 添加precision_recall_curve和average_precision_score
import torchvision

# 定义设备
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 数据转换和增强
transform = transforms.Compose([
transforms.RandomCrop(32, padding=4),
transforms.RandomHorizontalFlip(),
transforms.ToTensor(),
transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# 下载SVHN数据集
train_dataset = datasets.SVHN(root='./data', split='train', download=True, transform=transform)
test_dataset = datasets.SVHN(root='./data', split='test', download=True, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)

# 使用预训练的ResNet模型
model = models.resnet18(pretrained=True)

# 修改最后的全连接层以适应SVHN数据集的10个类别
model.fc = nn.Linear(model.fc.in_features, 10)

# 将模型移动到GPU（如果可用）
model = model.to(device)

# 定义损失函数和优化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)

def train_and_evaluate_model(model, train_loader, test_loader, criterion, optimizer, scheduler, num_epochs=20):
train_losses = []
test_losses = []
best_loss = float('inf')
early_stopping_patience = 5
patience_counter = 0

for epoch in range(num_epochs):
model.train()
running_loss = 0.0
for images, labels in tqdm(train_loader):
images, labels = images.to(device), labels.to(device)

optimizer.zero_grad()
outputs = model(images)
loss = criterion(outputs, labels)
loss.backward()
optimizer.step()
running_loss += loss.item() * len(images)
train_losses.append(running_loss / len(train_loader.dataset))

model.eval()
test_loss = 0.0
all_labels = []
all_preds = []
all_probs = []  # 用于存储预测概率
with torch.no_grad():
for inputs, labels in test_loader:
inputs, labels = inputs.to(device), labels.to(device)
outputs = model(inputs)
loss = criterion(outputs, labels)
test_loss += loss.item() * len(inputs)
_, preds = torch.max(outputs, 1)
all_labels.extend(labels.cpu().numpy())
all_preds.extend(preds.cpu().numpy())
all_probs.extend(outputs.cpu().numpy())  # 存储预测概率
test_losses.append(test_loss / len(test_loader.dataset))

print(f"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_losses[-1]:.4f}, Test Loss: {test_losses[-1]:.4f}")

scheduler.step()

# 提前停止
if test_losses[-1] < best_loss:
best_loss = test_losses[-1]
patience_counter = 0
else:
patience_counter += 1
if patience_counter >= early_stopping_patience:
print("Early stopping")
break

return train_losses, test_losses, all_labels, all_preds, all_probs

# 训练模型20个epoch并收集损失曲线和预测结果
num_epochs = 20
train_losses, test_losses, all_labels, all_preds, all_probs = train_and_evaluate_model(model, train_loader, test_loader, criterion, optimizer, scheduler, num_epochs)

# 计算每个类别的精度、召回率和F1 Score
for i in range(10):
precision = precision_score(all_labels, all_preds, labels=[i], average='macro')
recall = recall_score(all_labels, all_preds, labels=[i], average='macro')
f1 = f1_score(all_labels, all_preds, labels=[i], average='macro')
print(f"Class {i}: Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}")

# 绘制混淆矩阵
cm = confusion_matrix(all_labels, all_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=range(10))
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

# 绘制ROC Curve
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(10):
fpr[i], tpr[i], _ = roc_curve(np.array(all_labels) == i, np.array(all_preds) == i)
roc_auc[i] = auc(fpr[i], tpr[i])

plt.figure()
for i in range(10):
plt.plot(fpr[i], tpr[i], label=f'Class {i} (area = {roc_auc[i]:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

# 绘制Precision-Recall Curve
precision_dict = dict()
recall_dict = dict()
average_precision_dict = dict()
for i in range(10):
precision_dict[i], recall_dict[i], _ = precision_recall_curve(np.array(all_labels) == i, np.array(all_probs)[:, i])
average_precision_dict[i] = average_precision_score(np.array(all_labels) == i, np.array(all_probs)[:, i])

plt.figure()
for i in range(10):
plt.plot(recall_dict[i], precision_dict[i], label=f'Class {i} (AP={average_precision_dict[i]:.2f})')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.legend(loc="best")
plt.show()

# 绘制训练和测试损失曲线
plt.figure(figsize=(5,5))
plt.plot(train_losses, label="Training Loss")
plt.plot(test_losses, label="Testing Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Training and Testing Loss Curves")
plt.legend()
plt.show()

# 可视化一些测试结果
dataiter = iter(test_loader)
images, labels = next(dataiter)

# 打印图像和标签
print('GroundTruth: ', ' '.join(f'{labels[j]}' for j in range(4)))

outputs = model(images.to(device))
_, predicted = torch.max(outputs.cpu(), 1)

print('Predicted: ', ' '.join(f'{predicted[j]}' for j in range(4)))

# 显示图像
def imshow(img):
img = img / 2 + 0.5  # unnormalize
npimg = img.numpy()
plt.imshow(np.transpose(npimg, (1, 2, 0)))
plt.show()

imshow(torchvision.utils.make_grid(images[:4]))  # 只显示前4个图像import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import matplotlib.pyplot as plt
from torch.utils.data import DataLoader
from tqdm import tqdm
import torchvision.models as models
import numpy as np
from sklearn.metrics import accuracy_score, roc_curve, auc, recall_score, f1_score, precision_score, confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve, average_precision_score  # 添加precision_recall_curve和average_precision_score
import torchvision

# 定义设备
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 数据转换和增强
transform = transforms.Compose([
transforms.RandomCrop(32, padding=4),
transforms.RandomHorizontalFlip(),
transforms.ToTensor(),
transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# 下载SVHN数据集
train_dataset = datasets.SVHN(root='./data', split='train', download=True, transform=transform)
test_dataset = datasets.SVHN(root='./data', split='test', download=True, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)

# 使用预训练的ResNet模型
model = models.resnet18(pretrained=True)

# 修改最后的全连接层以适应SVHN数据集的10个类别
model.fc = nn.Linear(model.fc.in_features, 10)

# 将模型移动到GPU（如果可用）
model = model.to(device)

# 定义损失函数和优化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)

def train_and_evaluate_model(model, train_loader, test_loader, criterion, optimizer, scheduler, num_epochs=20):
train_losses = []
test_losses = []
best_loss = float('inf')
early_stopping_patience = 5
patience_counter = 0

for epoch in range(num_epochs):
model.train()
running_loss = 0.0
for images, labels in tqdm(train_loader):
images, labels = images.to(device), labels.to(device)

optimizer.zero_grad()
outputs = model(images)
loss = criterion(outputs, labels)
loss.backward()
optimizer.step()
running_loss += loss.item() * len(images)
train_losses.append(running_loss / len(train_loader.dataset))

model.eval()
test_loss = 0.0
all_labels = []
all_preds = []
all_probs = []  # 用于存储预测概率
with torch.no_grad():
for inputs, labels in test_loader:
inputs, labels = inputs.to(device), labels.to(device)
outputs = model(inputs)
loss = criterion(outputs, labels)
test_loss += loss.item() * len(inputs)
_, preds = torch.max(outputs, 1)
all_labels.extend(labels.cpu().numpy())
all_preds.extend(preds.cpu().numpy())
all_probs.extend(outputs.cpu().numpy())  # 存储预测概率
test_losses.append(test_loss / len(test_loader.dataset))

print(f"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_losses[-1]:.4f}, Test Loss: {test_losses[-1]:.4f}")

scheduler.step()

# 提前停止
if test_losses[-1] < best_loss:
best_loss = test_losses[-1]
patience_counter = 0
else:
patience_counter += 1
if patience_counter >= early_stopping_patience:
print("Early stopping")
break

return train_losses, test_losses, all_labels, all_preds, all_probs

# 训练模型20个epoch并收集损失曲线和预测结果
num_epochs = 20
train_losses, test_losses, all_labels, all_preds, all_probs = train_and_evaluate_model(model, train_loader, test_loader, criterion, optimizer, scheduler, num_epochs)

# 计算每个类别的精度、召回率和F1 Score
for i in range(10):
precision = precision_score(all_labels, all_preds, labels=[i], average='macro')
recall = recall_score(all_labels, all_preds, labels=[i], average='macro')
f1 = f1_score(all_labels, all_preds, labels=[i], average='macro')
print(f"Class {i}: Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}")

# 绘制混淆矩阵
cm = confusion_matrix(all_labels, all_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=range(10))
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

# 绘制ROC Curve
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(10):
fpr[i], tpr[i], _ = roc_curve(np.array(all_labels) == i, np.array(all_preds) == i)
roc_auc[i] = auc(fpr[i], tpr[i])

plt.figure()
for i in range(10):
plt.plot(fpr[i], tpr[i], label=f'Class {i} (area = {roc_auc[i]:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

# 绘制Precision-Recall Curve
precision_dict = dict()
recall_dict = dict()
average_precision_dict = dict()
for i in range(10):
precision_dict[i], recall_dict[i], _ = precision_recall_curve(np.array(all_labels) == i, np.array(all_probs)[:, i])
average_precision_dict[i] = average_precision_score(np.array(all_labels) == i, np.array(all_probs)[:, i])

plt.figure()
for i in range(10):
plt.plot(recall_dict[i], precision_dict[i], label=f'Class {i} (AP={average_precision_dict[i]:.2f})')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.legend(loc="best")
plt.show()

# 绘制训练和测试损失曲线
plt.figure(figsize=(5,5))
plt.plot(train_losses, label="Training Loss")
plt.plot(test_losses, label="Testing Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Training and Testing Loss Curves")
plt.legend()
plt.show()

# 可视化一些测试结果
dataiter = iter(test_loader)
images, labels = next(dataiter)

# 打印图像和标签
print('GroundTruth: ', ' '.join(f'{labels[j]}' for j in range(4)))

outputs = model(images.to(device))
_, predicted = torch.max(outputs.cpu(), 1)

print('Predicted: ', ' '.join(f'{predicted[j]}' for j in range(4)))

# 显示图像
def imshow(img):
img = img / 2 + 0.5  # unnormalize
npimg = img.numpy()
plt.imshow(np.transpose(npimg, (1, 2, 0)))
plt.show()

imshow(torchvision.utils.make_grid(images[:4]))  # 只显示前4个图像
